{"name": "Проверка отображения заказов пользователя из раздела 'История заказов' на странице 'Лента заказов'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "request = <SubRequest 'order' for <Function test_displaying_user_orders_from_order_history_section_on_order_feed_page[firefox]>>\nuser = {'email': 'ake2014allisonharvey@example.com', 'name': 'connorgarcia', 'password': 'U3GOewzp&t'}, logged = None\nindex_page = <pages.index_page.IndexPage object at 0x1033cbfe0>\n\n    @pytest.fixture()\n    def order(request, user, logged, index_page):\n        orders_count = request.node.get_closest_marker('orders_count').args[0]\n        for _ in range(orders_count):\n>           create_order(index_page)\n\nconftest.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nhelpers.py:2: in create_order\n    index_page.add_ingredient_to_order_by_index(1)\npages/index_page.py:32: in add_ingredient_to_order_by_index\n    ingredients = self.get_visible_elements(IndexPageLocators.LIST_OF_INGREDIENTS)\npages/base_page.py:48: in get_visible_elements\n    return WDWait(self.web_drv, timeout).until((ec.visibility_of_all_elements_located(locator)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d8a4906a-48e1-479d-b35f-f7c0abb76495\")>\nmethod = <function visibility_of_all_elements_located.<locals>._predicate at 0x1034822a0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "parameters": [{"name": "web_drv", "value": "'firefox'"}], "start": 1720797706936, "stop": 1720797706936, "uuid": "4f94ba18-4070-4dff-9e6c-cad1948bd448", "historyId": "17dc3e82a08ae4dcf26b9af526298d73", "testCaseId": "af6e0162a29f7e4a93553496b2e1567a", "fullName": "tests.test_section_order_feed.TestSectionOrderFeed#test_displaying_user_orders_from_order_history_section_on_order_feed_page", "labels": [{"name": "tag", "value": "orders_count(2)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_section_order_feed"}, {"name": "subSuite", "value": "TestSectionOrderFeed"}, {"name": "host", "value": "MacBook-Air-Lapka.local"}, {"name": "thread", "value": "80456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_section_order_feed"}]}